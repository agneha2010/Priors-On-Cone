dim(Delta)
adjacency = out$adjacency
adj.list = graph_from_adj_list(adjacency, mode = c("out", "in", "all", "total"),duplicate = TRUE)
adj.mat = as_adjacency_matrix(adj.list, sparse=F)
### cliques
graph.list = graph_from_adjacency_matrix(adj.mat, "undirected", weighted=T, diag=F)
clique.list = max_cliques(graph.list)
clique.size = unlist(lapply(clique.list,length))
degree = clique.size
l = count_max_cliques(graph.list)
J    <- 24
knot <- J-3
BS <- matrix(0, length(y), Ti)
BS[cbind(1:length(y), xt)] <- 1
Deltatilde <- BS %*% Delta
gamma_ls <- list()
Als <- list()
for(i in 1:n){
ni <- 1:Ti
Als[[i]] <- bsplineS(xt[ni]/Ti, breaks = seq(0, 1, 1/knot))
}
X <- Deltatilde
cliques=clique.list
Total_itr=30
id = rep(1:n,each=Ti)
### ma and wo ma
R <- fitting(y, X, diag(Ti), cliques=clique.list, Total_itr=100, id, Als)
URS <- fittingUN(y, xt, Ti, Total_itr=100)
UR <- fittingUN(y, xt, Ti, splin=F, Total_itr=100)
result = data.frame(x=1:Ti,R = R$esti,URS = URS$esti,UR = UR$esti)
#### spline part
t=1:24
i1 = 5
i2 = 8
i3 = 20
A = matrix(0,nrow=Ti+2,ncol=Ti)
for(j in 1:i1){
A[j,j] = 1.0
}
A[(i1+1),i1] = -1.0
A[(i1+1),(i1+1)] = 1.0
for(j in i1:(i2-1)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i3):(Ti-2)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i2):(i3-1)){
A[j+2,j] = t[(j+1)]-t[(j+2)]
A[j+2,(j+1)] = -t[j]+t[(j+2)]
A[j+2,(j+2)] = -t[j+1]+t[j]
}
A[(Ti+1),(Ti-1)] = 1.0
A[(Ti+1),Ti] = -1.0
A[(Ti+2),Ti] = 1.0
J    <- 24
knot <- J-3
BS1 <- bsplineS((1:Ti)/Ti, breaks = seq(0, 1, 1/knot))
A <- A %*% BS1
m = nrow(A)
### makeH uses Ax <= 0; so multiply by -1
B = -A
qux <- makeH(B, rep(0, m))
### makeH produces output A such that Ax >= 0
#print(qux)
out <- scdd(d2q(qux),adjacency = T,incidence = T,inputincidence = T,inputadjacency = T, representation = "H")
out1 = q2d(out$output)
Delta = t(out1[,-c(1:2)])
dim(Delta)
adjacency = out$adjacency
adj.list = graph_from_adj_list(adjacency, mode = c("out", "in", "all", "total"),duplicate = TRUE)
adj.mat = as_adjacency_matrix(adj.list, sparse=F)
### cliques
graph.list = graph_from_adjacency_matrix(adj.mat, "undirected", weighted=T, diag=F)
clique.list = max_cliques(graph.list)
clique.size = unlist(lapply(clique.list,length))
degree = clique.size
l = count_max_cliques(graph.list)
BS <- bsplineS(xt/Ti, breaks = seq(0, 1, 1/knot))
Deltatilde <- BS %*% Delta
gamma_ls <- list()
Als <- list()
for(i in 1:n){
#i=1
ni <- 1:Ti
Als[[i]] <- bsplineS(xt[ni]/Ti, breaks = seq(0, 1, 1/knot))
}
X <- Deltatilde
cliques=clique.list
Total_itr=30
id = rep(1:n,each=Ti)
RS <- fitting(y, X, BS1, cliques=clique.list, Total_itr=100, id, Als)
#URS1 <- fittingUN(y, xt, Ti, Total_itr=30)
result = cbind(result,RS$esti)
colnames(result)[5] = c("RS")
write.csv(result , "result_day6.csv")
dat.true = data.frame(x=1:Ti,y=colMeans(ydata6))
df.plot = melt(result,id.vars = "x")
p1 = ggplot()+
geom_line(data = df.plot,aes(x=x,y=value,color=variable))+
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
theme(text = element_text(size = 30))+
geom_point(data = dat.true,aes(x=x,y=y))+ ylab("activity") + xlab("Time (in hours)")
p1
ggsave('ydata6.png', p1, width = 17,height=11, dpi = 300)
ydata7 <- ydatar[Sind7, ]
ind1 <- which(is.na(rowMeans(ydata7)==T))
if(length(ind1)) {ydata7 <- ydata7[-ind1, ]}
day7 = apply(ydata7,2,median)
#day7 = colMeans(ydata7)
plot(day7,type="l")
library(rnhanesdata)
require(stats)
require(graphics)
library(splines2)
library(coneproj)
library(rcdd)
library(truncnorm)
library(truncdist)
library(mvtnorm)
library(R.utils)
library(Matrix)
library(igraph)
library(MCMCpack)
library(fda)
library(nnls)
library(dplyr)
library(reshape2)
library(ggplot2)
###############model fitting
source("/Users/pro/Desktop/Backup/priors_on_cone/projects/arkaprava_v1/fittingCompoSpikeFinal - Mixed effect Data.R")
source('/Users/pro/Desktop/Backup/priors_on_cone/projects/arkaprava_v1/fittingCompo - Mixed effect Data.R')
Ti=24
n = nrow(ydata7)
y = as.numeric(t(ydata7))
xt = rep(1:Ti,n)
t=1:24
i1 = 5
i2 = 8
i3 = 20
A = matrix(0,nrow=Ti+2,ncol=Ti)
for(j in 1:i1){
A[j,j] = 1.0
}
A[(i1+1),i1] = -1.0
A[(i1+1),(i1+1)] = 1.0
for(j in i1:(i2-1)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i3):(Ti-2)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i2):(i3-1)){
A[j+2,j] = t[(j+1)]-t[(j+2)]
A[j+2,(j+1)] = -t[j]+t[(j+2)]
A[j+2,(j+2)] = -t[j+1]+t[j]
}
A[(Ti+1),(Ti-1)] = 1.0
A[(Ti+1),Ti] = -1.0
A[(Ti+2),Ti] = 1.0
m = nrow(A)
### makeH uses Ax <= 0; so multiply by -1
B = -A
qux <- makeH(B, rep(0, m))
### makeH produces output A such that Ax >= 0
#print(qux)
out <- scdd(d2q(qux),adjacency = T,incidence = T,inputincidence = T,inputadjacency = T, representation = "H")
out1 = q2d(out$output)
Delta = t(out1[,-c(1:2)])
dim(Delta)
adjacency = out$adjacency
adj.list = graph_from_adj_list(adjacency, mode = c("out", "in", "all", "total"),duplicate = TRUE)
adj.mat = as_adjacency_matrix(adj.list, sparse=F)
### cliques
graph.list = graph_from_adjacency_matrix(adj.mat, "undirected", weighted=T, diag=F)
clique.list = max_cliques(graph.list)
clique.size = unlist(lapply(clique.list,length))
degree = clique.size
l = count_max_cliques(graph.list)
J    <- 24
knot <- J-3
BS <- matrix(0, length(y), Ti)
BS[cbind(1:length(y), xt)] <- 1
Deltatilde <- BS %*% Delta
gamma_ls <- list()
Als <- list()
for(i in 1:n){
ni <- 1:Ti
Als[[i]] <- bsplineS(xt[ni]/Ti, breaks = seq(0, 1, 1/knot))
}
X <- Deltatilde
cliques=clique.list
Total_itr=30
id = rep(1:n,each=Ti)
### ma and wo ma
R <- fitting(y, X, diag(Ti), cliques=clique.list, Total_itr=100, id, Als)
URS <- fittingUN(y, xt, Ti, Total_itr=100)
UR <- fittingUN(y, xt, Ti, splin=F, Total_itr=100)
result = data.frame(x=1:Ti,R = R$esti,URS = URS$esti,UR = UR$esti)
#### spline part
t=1:24
i1 = 5
i2 = 8
i3 = 20
A = matrix(0,nrow=Ti+2,ncol=Ti)
for(j in 1:i1){
A[j,j] = 1.0
}
A[(i1+1),i1] = -1.0
A[(i1+1),(i1+1)] = 1.0
for(j in i1:(i2-1)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i3):(Ti-2)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i2):(i3-1)){
A[j+2,j] = t[(j+1)]-t[(j+2)]
A[j+2,(j+1)] = -t[j]+t[(j+2)]
A[j+2,(j+2)] = -t[j+1]+t[j]
}
A[(Ti+1),(Ti-1)] = 1.0
A[(Ti+1),Ti] = -1.0
A[(Ti+2),Ti] = 1.0
J    <- 24
knot <- J-3
BS1 <- bsplineS((1:Ti)/Ti, breaks = seq(0, 1, 1/knot))
A <- A %*% BS1
m = nrow(A)
### makeH uses Ax <= 0; so multiply by -1
B = -A
qux <- makeH(B, rep(0, m))
### makeH produces output A such that Ax >= 0
#print(qux)
out <- scdd(d2q(qux),adjacency = T,incidence = T,inputincidence = T,inputadjacency = T, representation = "H")
out1 = q2d(out$output)
Delta = t(out1[,-c(1:2)])
dim(Delta)
adjacency = out$adjacency
adj.list = graph_from_adj_list(adjacency, mode = c("out", "in", "all", "total"),duplicate = TRUE)
adj.mat = as_adjacency_matrix(adj.list, sparse=F)
### cliques
graph.list = graph_from_adjacency_matrix(adj.mat, "undirected", weighted=T, diag=F)
clique.list = max_cliques(graph.list)
clique.size = unlist(lapply(clique.list,length))
degree = clique.size
l = count_max_cliques(graph.list)
BS <- bsplineS(xt/Ti, breaks = seq(0, 1, 1/knot))
Deltatilde <- BS %*% Delta
gamma_ls <- list()
Als <- list()
for(i in 1:n){
#i=1
ni <- 1:Ti
Als[[i]] <- bsplineS(xt[ni]/Ti, breaks = seq(0, 1, 1/knot))
}
X <- Deltatilde
cliques=clique.list
Total_itr=30
id = rep(1:n,each=Ti)
RS <- fitting(y, X, BS1, cliques=clique.list, Total_itr=100, id, Als)
#URS1 <- fittingUN(y, xt, Ti, Total_itr=30)
result = cbind(result,RS$esti)
colnames(result)[5] = c("RS")
write.csv(result , "result_day7.csv")
dat.true = data.frame(x=1:Ti,y=colMeans(ydata7))
df.plot = melt(result,id.vars = "x")
p1 = ggplot()+
geom_line(data = df.plot,aes(x=x,y=value,color=variable))+
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
theme(text = element_text(size = 30))+
geom_point(data = dat.true,aes(x=x,y=y))+ ylab("activity") + xlab("Time (in hours)")
p1
ggsave('ydata7.png', p1, width = 17,height=11, dpi = 300)
df.plot = melt(result,id.vars = c("x","id"))
result1 = read.csv("result_day1.csv")
result2 = read.csv("result_day2.csv")
result3 = read.csv("result_day3.csv")
result4 = read.csv("result_day4.csv")
result5 = read.csv("result_day5.csv")
result6 = read.csv("result_day6.csv")
result7 = read.csv("result_day7.csv")
result = bind_rows(result1[,-1],result2[,-1],result3[,-1],result4[,-1],result5[,-1],
result6[,-1],result7[,-1],.id="id")
result$id = as.factor(result$id)
levels(result$id) = c("Day 1","Day 2","Day 3","Day 4","Day 5","Day 6","Day 7")
#levels(result$id) = c("Day 1","Day 2","Day 3","Day 4","Day 5","Day 6","Day 7")
levels(result$id) = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
df.plot = melt(result,id.vars = c("x","id"))
df.plot$Method = as.factor(df.plot$variable)
levels(df.plot$variable) = c("Restricted","Unrestricted spline",
"Unrestricted","Restricted spline")
day1 = data.frame(x=1:Ti,y=colMeans(ydata1))
ydata2 <- ydatar[Sind2, ]
ind1 <- which(is.na(rowMeans(ydata2)==T))
if(length(ind1)) {ydata2 <- ydata2[-ind1, ]}
day2 = apply(ydata2,2,median)
#day2 = colMeans(ydata2)
plot(day2,type="l")
ydata1 <- ydatar[Sind1, ]
ind1 <- which(is.na(rowMeans(ydata1)==T))
if(length(ind1)) {ydata1 <- ydata1[-ind1, ]}
day1 = apply(ydata1,2,median)
day1.mean = colMeans(ydata1)
plot(day1.mean,type="p")
plot(day1,type="p")
day1 = data.frame(x=1:Ti,y=colMeans(ydata1))
day2 = data.frame(x=1:Ti,y=colMeans(ydata2))
day3 = data.frame(x=1:Ti,y=colMeans(ydata3))
day4 = data.frame(x=1:Ti,y=colMeans(ydata4))
day5 = data.frame(x=1:Ti,y=colMeans(ydata5))
day6 = data.frame(x=1:Ti,y=colMeans(ydata6))
day7 = data.frame(x=1:Ti,y=colMeans(ydata7))
df.true = bind_rows(day1,day2,day3,day4,day5,day6,day7,.id="id")
df.true$id = as.factor(df.true$id)
levels(df.true$id) = c("Day 1","Day 2","Day 3","Day 4","Day 5","Day 6","Day 7")
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id) +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
df.true = bind_rows(day1,day2,day3,day4,day5,day6,day7,.id="id")
df.true$id = as.factor(df.true$id)
#levels(df.true$id) = c("Day 1","Day 2","Day 3","Day 4","Day 5","Day 6","Day 7")
levels(df.true$id) = c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id) +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id) +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="v") +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="h") +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
View(df.plot)
table(df.plot$variable)
table(df.plot$Method)
levels(df.plot$Method) = c("Restricted","Unrestricted spline",
"Unrestricted","Restricted spline")
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="h") +
theme(text = element_text(size = 17),
legend.position=c(.8,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="h") +
theme(text = element_text(size = 17),
legend.position=c(.7,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="h") +
theme(text = element_text(size = 17),
legend.position=c(.7,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
p1 = ggplot() +
geom_line(data = df.plot,aes(x=x,y=value,color=Method)) +
#  scale_linetype_manual(values=c("dashed","solid","solid","solid"))+
geom_point(data = df.true,aes(x=x,y=y)) +
ylab("Activity count") +
theme_bw() +
xlab("Time (in hours)") + facet_wrap(~id, dir="h") +
theme(text = element_text(size = 17),
legend.position=c(.7,.1),
plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
p1
ggsave('all7days.png', p1, width = 17,height=11, dpi = 300)
2.4+6.3+3.2+2.3+1.8+2.7+1
10.2*8
10.2*.8
19+16
ni <- 1:Ti
library(rnhanesdata)
require(stats)
require(graphics)
library(splines2)
library(coneproj)
library(rcdd)
library(truncnorm)
library(truncdist)
library(mvtnorm)
library(R.utils)
library(Matrix)
library(igraph)
library(MCMCpack)
library(fda)
library(nnls)
###############model fitting
source("/Users/pro/Desktop/Backup/priors_on_cone/projects/arkaprava_v1/fittingCompoSpikeFinal - Mixed effect Data.R")
source('/Users/pro/Desktop/Backup/priors_on_cone/projects/arkaprava_v1/fittingCompo - Mixed effect Data.R')
Ti=24
t=1:24
i1 = 5
i2 = 8
i3 = 20
A = matrix(0,nrow=Ti+2,ncol=Ti)
for(j in 1:i1){
A[j,j] = 1.0
}
A[(i1+1),i1] = -1.0
A[(i1+1),(i1+1)] = 1.0
for(j in i1:(i2-1)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i3):(Ti-2)){
A[j+2,j] = t[(j+2)]-t[(j+1)]
A[j+2,(j+1)] = t[j]-t[(j+2)]
A[j+2,(j+2)] = t[j+1]-t[j]
}
for(j in (i2):(i3-1)){
A[j+2,j] = t[(j+1)]-t[(j+2)]
A[j+2,(j+1)] = -t[j]+t[(j+2)]
A[j+2,(j+2)] = -t[j+1]+t[j]
}
## added by me
#A[i2-1,(i2-2):i2] = - A[i2-1,(i2-2):i2]
A[(Ti+1),(Ti-1)] = 1.0
A[(Ti+1),Ti] = -1.0
A[(Ti+2),Ti] = 1.0
View(A)
setwd("~/Desktop/Backup/priors_on_cone/projects/arkaprava_v1/NHANES_analysis/not_log_transformed_new_constraints_with_zeros")
write.csv(A,"constraints.csv")
